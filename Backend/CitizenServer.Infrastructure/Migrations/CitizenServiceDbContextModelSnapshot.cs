// <auto-generated />
using System;
using CitizenServer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CitizenServer.Infrastructure.Migrations
{
    [DbContext(typeof(CitizenServiceDbContext))]
    partial class CitizenServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CitizenServer.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Legal"
                        });
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DossierAdministratifId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportLocation")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnPlatform")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DossierAdministratifId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsImportable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeDossierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeDossierId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.DossierAdministratif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TypeDossierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TypeDossierId");

                    b.HasIndex("UserId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Rendezvous", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeDossierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeDossierId");

                    b.ToTable("Rendezvous");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.TypeDossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeDossiers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Passeport"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Carte Nationale"
                        });
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Document", b =>
                {
                    b.HasOne("CitizenServer.Domain.Entities.DossierAdministratif", "DossierAdministratif")
                        .WithMany("Documents")
                        .HasForeignKey("DossierAdministratifId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierAdministratif");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.DocumentType", b =>
                {
                    b.HasOne("CitizenServer.Domain.Entities.Category", "CategoryEntity")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CitizenServer.Domain.Entities.TypeDossier", "TypeDossierEntity")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("TypeDossierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryEntity");

                    b.Navigation("TypeDossierEntity");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.DossierAdministratif", b =>
                {
                    b.HasOne("CitizenServer.Domain.Entities.TypeDossier", "TypeDossier")
                        .WithMany("Dossiers")
                        .HasForeignKey("TypeDossierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeDossier");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Rendezvous", b =>
                {
                    b.HasOne("CitizenServer.Domain.Entities.TypeDossier", "TypeDossier")
                        .WithMany("Rendezvous")
                        .HasForeignKey("TypeDossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDossier");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.Category", b =>
                {
                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.DossierAdministratif", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("CitizenServer.Domain.Entities.TypeDossier", b =>
                {
                    b.Navigation("DocumentTypes");

                    b.Navigation("Dossiers");

                    b.Navigation("Rendezvous");
                });
#pragma warning restore 612, 618
        }
    }
}
